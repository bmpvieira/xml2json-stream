// Generated by CoffeeScript 1.4.0
(function() {
  var EOL, Parser, exports, sax, stream,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  stream = require('stream');

  sax = require('sax');

  EOL = require('os').EOL;

  Parser = (function(_super) {

    __extends(Parser, _super);

    function Parser(_splitTag) {
      var parenTagName, path, pathArraysIndexes, tagName, tagObj,
        _this = this;
      this._splitTag = _splitTag;
      this.end = __bind(this.end, this);

      this.resume = __bind(this.resume, this);

      this.pause = __bind(this.pause, this);

      this.write = __bind(this.write, this);

      this.readable = true;
      this.writable = true;
      this._notPaused = true;
      this._elements = {};
      tagObj = null;
      tagName = null;
      parenTagName = null;
      path = [];
      pathArraysIndexes = {};
      this._saxParser = sax.createStream(false, {
        trim: true,
        lowercase: true,
        position: false
      });
      this._saxParser.on('opentag', function(tag) {
        var index, key, _results;
        if ((tagObj != null ? tagObj[tagName] : void 0) != null) {
          tagObj = tagObj[tagName];
        } else if (path.length > 1) {
          tagObj = _this._getObjByDynamicKeys(_this._elements, path, pathArraysIndexes);
        } else {
          tagObj = _this._elements;
        }
        path.push(tag.name);
        parenTagName = tagName;
        tagName = tag.name;
        if (!(parenTagName != null)) {
          return tagObj[tagName] = {};
        } else {
          if (tagObj[parenTagName] != null) {
            tagObj = tagObj[parenTagName];
          }
          if (!(tagObj[tagName] != null)) {
            return tagObj[tagName] = {};
          } else {
            if (tagObj[tagName] instanceof Array) {
              pathArraysIndexes[tagName]++;
              index = pathArraysIndexes[tagName];
              tagObj[tagName].push({});
              tagObj = tagObj[tagName][index];
            } else {
              pathArraysIndexes[tagName] = 1;
              tagObj[tagName] = [tagObj[tagName], {}];
              tagObj = tagObj[tagName][1];
            }
            _results = [];
            for (key in pathArraysIndexes) {
              if (__indexOf.call(path, key) < 0) {
                _results.push(delete pathArraysIndexes[key]);
              }
            }
            return _results;
          }
        }
      });
      this._saxParser.on('text', function(text) {
        var number;
        number = Number(text);
        if (isNaN(number)) {
          return tagObj[tagName] = text;
        } else {
          return tagObj[tagName] = number;
        }
      });
      this._saxParser.on('closetag', function(tag) {
        var data;
        if ((_this._splitTag != null) && tag === _this._splitTag) {
          data = JSON.stringify(_this._getObjByDynamicKeys(_this._elements, path, pathArraysIndexes));
          _this.emit('data', "" + data + EOL);
          _this._elements = {};
          path = [];
          pathArraysIndexes = {};
        }
        path.pop();
        tagName = path[path.length - 1];
        return parenTagName = path[path.length - 2];
      });
      this._saxParser.on('error', function(error) {
        return _this.emit('error', error);
      });
    }

    Parser.prototype.write = function(data) {
      this._saxParser.write(data);
      return this._notPaused;
    };

    Parser.prototype.pause = function() {
      return this._notPaused = false;
    };

    Parser.prototype.resume = function() {
      this._notPaused = true;
      return this.emit('drain');
    };

    Parser.prototype.end = function(data) {
      if (!(this._splitTag != null)) {
        this.emit('data', JSON.stringify(this._elements));
      }
      return this.emit('close');
    };

    Parser.prototype._getObjByDynamicKeys = function(object, path, pathArraysIndexes) {
      var index, key, _i, _len;
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        key = path[_i];
        index = pathArraysIndexes[key];
        if (!(index != null)) {
          object = object[key] = object[key];
        } else {
          object = object[key][index];
        }
      }
      return object;
    };

    return Parser;

  })(stream.Stream);

  module.exports = exports = {
    Parser: Parser
  };

}).call(this);
